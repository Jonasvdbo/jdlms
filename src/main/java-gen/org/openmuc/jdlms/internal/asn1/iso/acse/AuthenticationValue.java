/*
 * This class file was automatically generated by ASN1bean v1.13.0 (http://www.beanit.com)
 */

package org.openmuc.jdlms.internal.asn1.iso.acse;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Serializable;

import com.beanit.asn1bean.ber.BerTag;
import com.beanit.asn1bean.ber.ReverseByteArrayOutputStream;
import com.beanit.asn1bean.ber.types.BerBitString;
import com.beanit.asn1bean.ber.types.BerOctetString;
import com.beanit.asn1bean.ber.types.BerType;

public class AuthenticationValue implements BerType, Serializable {

    private static final long serialVersionUID = 1L;

    private byte[] code = null;
    private BerOctetString charstring = null;
    private BerBitString bitstring = null;

    public AuthenticationValue() {
    }

    public AuthenticationValue(byte[] code) {
        this.code = code;
    }

    public void setCharstring(BerOctetString charstring) {
        this.charstring = charstring;
    }

    public BerOctetString getCharstring() {
        return charstring;
    }

    public void setBitstring(BerBitString bitstring) {
        this.bitstring = bitstring;
    }

    public BerBitString getBitstring() {
        return bitstring;
    }

    @Override
    public int encode(OutputStream reverseOS) throws IOException {

        if (code != null) {
            reverseOS.write(code);
            return code.length;
        }

        int codeLength = 0;
        if (bitstring != null) {
            codeLength += bitstring.encode(reverseOS, false);
            // write tag: CONTEXT_CLASS, PRIMITIVE, 1
            reverseOS.write(0x81);
            codeLength += 1;
            return codeLength;
        }

        if (charstring != null) {
            codeLength += charstring.encode(reverseOS, false);
            // write tag: CONTEXT_CLASS, PRIMITIVE, 0
            reverseOS.write(0x80);
            codeLength += 1;
            return codeLength;
        }

        throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
    }

    @Override
    public int decode(InputStream is) throws IOException {
        return decode(is, null);
    }

    public int decode(InputStream is, BerTag berTag) throws IOException {

        int tlvByteCount = 0;
        boolean tagWasPassed = (berTag != null);

        if (berTag == null) {
            berTag = new BerTag();
            tlvByteCount += berTag.decode(is);
        }

        if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
            charstring = new BerOctetString();
            tlvByteCount += charstring.decode(is, false);
            return tlvByteCount;
        }

        if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
            bitstring = new BerBitString();
            tlvByteCount += bitstring.decode(is, false);
            return tlvByteCount;
        }

        if (tagWasPassed) {
            return 0;
        }

        throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
    }

    public void encodeAndSave(int encodingSizeGuess) throws IOException {
        ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
        encode(reverseOS);
        code = reverseOS.getArray();
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        appendAsString(sb, 0);
        return sb.toString();
    }

    public void appendAsString(StringBuilder sb, int indentLevel) {

        if (charstring != null) {
            sb.append("charstring: ").append(charstring);
            return;
        }

        if (bitstring != null) {
            sb.append("bitstring: ").append(bitstring);
            return;
        }

        sb.append("<none>");
    }

}
